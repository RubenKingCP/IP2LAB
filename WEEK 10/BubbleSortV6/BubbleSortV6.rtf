{\rtf1\ansi\deff0\deftab720{\fonttbl{\f0\fmodern Consolas;}}
{\colortbl\red0\green128\blue0;\red0\green0\blue0;\red255\green0\blue0;\red128\green0\blue128;\red0\green0\blue255;\red0\green120\blue215;}
{\info{\comment Generated by the SynEdit RTF exporter}
{\title BubbleSortV6.rtf}}

\deflang1033\pard\plain\f0\fs24 \cf0 #include <stdio.h>
\par #include <stdlib.h>
\par #include <stdbool.h>
\par 
\par \cf1\b void\b0  displayArray\cf2\b (\cf1 int\b0  \cf2\b *\b0\cf1 ar\cf2\b [],\b0\cf1  \b int\b0  numOfElements\cf2\b );
\par \cf1 void\b0  displayArrayStatus\cf2\b (\cf1 int\b0  \cf2\b *\b0\cf1 ar\cf2\b [],\b0\cf1  \b int\b0  numOfElements\cf2\b );
\par \cf1 void\b0  moveBubbleUp\cf2\b (\cf1 int\b0  \cf2\b *\b0\cf1 ar\cf2\b [],\b0\cf1  \b int\b0  numOfElements\cf2\b );
\par \cf1 void\b0  bubbleSort\cf2\b (\cf1 int\b0  \cf2\b *\b0\cf1 ar\cf2\b [],\b0\cf1  \b int\b0  numOfElements\cf2\b );
\par \cf1 bool\b0  isSorted\cf2\b (\cf1 int\b0  \cf2\b *\b0\cf1 ar\cf2\b [],\b0\cf1  \b int\b0  numOfElements\cf2\b );
\par 
\par \cf1 int\b0  main\cf2\b ()\b0\cf1  \cf2\b \{
\par \b0\cf1     \b int\b0  arr\cf2\b []\b0\cf1  \cf2\b =\b0\cf1  \cf2\b \{\b0\cf3 1\cf2\b ,\b0\cf1  \cf3 0\cf2\b ,\b0\cf1  \cf3 4\cf2\b ,\b0\cf1  \cf3 3\cf2\b ,\b0\cf1  \cf3 5\cf2\b ,\b0\cf1  \cf3 2\cf2\b \};
\par \b0\cf1     \b int\b0  numOfElements\cf2\b ,\b0\cf1  i\cf2\b ;
\par \b0\cf1     printf\cf2\b (\cf4 "Bubble sort\\n"\cf2 );
\par \b0\cf1     numOfElements \cf2\b =\b0\cf1  \b sizeof\cf2 (\b0\cf1 arr\cf2\b )\b0\cf1  \cf2\b /\b0\cf1  \b sizeof\cf2 (\cf1 int\cf2 );
\par \b0\cf1     \b int\b0  \cf2\b *\b0\cf1 ar\cf2\b [\b0\cf1 numOfElements\cf2\b ];
\par \b0\cf1     \b for\b0  \cf2\b (\b0\cf1 i \cf2\b =\b0\cf1  \cf3 0\cf2\b ;\b0\cf1  i \cf2\b <\b0\cf1  numOfElements\cf2\b ;\b0\cf1  i\cf2\b ++)\b0\cf1  \cf2\b \{
\par \b0\cf1         ar\cf2\b [\b0\cf1 i\cf2\b ]\b0\cf1  \cf2\b =\b0\cf1  \cf2\b &\b0\cf1 arr\cf2\b [\b0\cf1 i\cf2\b ];
\par \b0\cf1     \cf2\b \}
\par 
\par \b0\cf1     displayArray\cf2\b (\b0\cf1 ar\cf2\b ,\b0\cf1  numOfElements\cf2\b );
\par \b0\cf1     displayArrayStatus\cf2\b (\b0\cf1 ar\cf2\b ,\b0\cf1  numOfElements\cf2\b );
\par \b0\cf1     bubbleSort\cf2\b (\b0\cf1 ar\cf2\b ,\b0\cf1  numOfElements\cf2\b );
\par \b0\cf1     displayArray\cf2\b (\b0\cf1 ar\cf2\b ,\b0\cf1  numOfElements\cf2\b );
\par \b0\cf1     displayArrayStatus\cf2\b (\b0\cf1 ar\cf2\b ,\b0\cf1  numOfElements\cf2\b );
\par \b0\cf1     \b return\b0  \cf3 0\cf2\b ;
\par \}
\par 
\par \cf1 void\b0  displayArrayStatus\cf2\b (\cf1 int\b0  \cf2\b *\b0\cf1 ar\cf2\b [],\b0\cf1  \b int\b0  numOfElements\cf2\b )\b0\cf1  \cf2\b \{
\par \b0\cf1     printf\cf2\b (\cf4 "Array status: %s\\n"\cf2 ,\b0\cf1  isSorted\cf2\b (\b0\cf1 ar\cf2\b ,\b0\cf1  numOfElements\cf2\b )\b0\cf1  \cf2\b ?\b0\cf1  \cf4\b "sorted"\b0\cf1  \cf2\b :\b0\cf1  \cf4\b "not sorted"\cf2 );
\par \}
\par 
\par \cf1 bool\b0  isSorted\cf2\b (\cf1 int\b0  \cf2\b *\b0\cf1 ar\cf2\b [],\b0\cf1  \b int\b0  numOfElements\cf2\b )\b0\cf1  \cf2\b \{
\par \b0\cf1     \b int\b0  i\cf2\b ;
\par \b0\cf1     \b for\b0  \cf2\b (\b0\cf1 i \cf2\b =\b0\cf1  \cf3 0\cf2\b ;\b0\cf1  i \cf2\b <\b0\cf1  numOfElements \cf2\b -\b0\cf1  \cf3 1\cf2\b ;\b0\cf1  i\cf2\b ++)\b0\cf1  \cf2\b \{
\par \b0\cf1         \b if\b0  \cf2\b (*\b0\cf1 ar\cf2\b [\b0\cf1 i\cf2\b ]\b0\cf1  \cf2\b >\b0\cf1  \cf2\b *\b0\cf1 ar\cf2\b [\b0\cf1 i \cf2\b +\b0\cf1  \cf3 1\cf2\b ])\b0\cf1  \cf2\b \{
\par \b0\cf1             \b return\b0  \b false\cf2 ;
\par \b0\cf1         \cf2\b \}
\par \b0\cf1     \cf2\b \}
\par \b0\cf1     \b return\b0  \b true\cf2 ;
\par \}
\par 
\par \cf1 void\b0  displayArray\cf2\b (\cf1 int\b0  \cf2\b *\b0\cf1 ar\cf2\b [],\b0\cf1  \b int\b0  numOfElements\cf2\b )\b0\cf1  \cf2\b \{
\par \b0\cf1     \b int\b0  i\cf2\b ;
\par \b0\cf1     \b for\b0  \cf2\b (\b0\cf1 i \cf2\b =\b0\cf1  \cf3 0\cf2\b ;\b0\cf1  i \cf2\b <\b0\cf1  numOfElements\cf2\b ;\b0\cf1  i\cf2\b ++)
\par \b0\cf1         printf\cf2\b (\cf4 "%d\\t"\cf2 ,\b0\cf1  \cf2\b *\b0\cf1 ar\cf2\b [\b0\cf1 i\cf2\b ]);\b0\cf1  
\par     printf\cf2\b (\cf4 "\\n"\cf2 );
\par \}
\par 
\par \cf1 void\b0  bubbleSort\cf2\b (\cf1 int\b0  \cf2\b *\b0\cf1 ar\cf2\b [],\b0\cf1  \b int\b0  numOfElements\cf2\b )\b0\cf1  \cf2\b \{
\par \b0\cf1     moveBubbleUp\cf2\b (\b0\cf1 ar\cf2\b ,\b0\cf1  numOfElements\cf2\b );
\par \b0\cf1     \cf5\i //printf("\\nEnd of array pass for %d elements\\n\\n", numOfElements);
\par \i0\cf1     \cf5\i //system("pause");
\par \i0\cf1     printf\cf2\b (\cf4 "\\n"\cf2 );
\par \b0\cf1     \b if\b0  \cf2\b (!\b0\cf1 isSorted\cf2\b (\b0\cf1 ar\cf2\b ,\b0\cf1  numOfElements\cf2\b ))\b0\cf1  \cf2\b \{
\par \b0\cf1         bubbleSort\cf2\b (\b0\cf1 ar\cf2\b ,\b0\cf1  numOfElements \cf2\b -\b0\cf1  \cf3 1\cf2\b );
\par \b0\cf1     \cf2\b \}
\par \b0\cf1     \b return\cf2 ;
\par \}
\par 
\par \cf1 void\b0  moveBubbleUp\cf2\b (\cf1 int\b0  \cf2\b *\b0\cf1 ar\cf2\b [],\b0\cf1  \b int\b0  numOfElements\cf2\b )\b0\cf1  \cf2\b \{
\par \b0\cf1     \b int\b0  i\cf2\b ,\b0\cf1  \cf2\b *\b0\cf1 temp\cf2\b ;
\par \b0\cf1     \b for\b0  \cf2\b (\b0\cf1 i \cf2\b =\b0\cf1  \cf3 0\cf2\b ;\b0\cf1  i \cf2\b <\b0\cf1  numOfElements \cf2\b -\b0\cf1  \cf3 1\cf2\b ;\b0\cf1  i\cf2\b ++)\b0\cf1  \cf2\b \{
\par \b0\cf1         \b if\b0  \cf2\b (*\b0\cf1 ar\cf2\b [\b0\cf1 i\cf2\b ]\b0\cf1  \cf2\b >\b0\cf1  \cf2\b *\b0\cf1 ar\cf2\b [\b0\cf1 i \cf2\b +\b0\cf1  \cf3 1\cf2\b ])\b0\cf1  \cf2\b \{\b0\cf1   
\par             temp \cf2\b =\b0\cf1  ar\cf2\b [\b0\cf1 i\cf2\b ];
\par \b0\cf1             ar\cf2\b [\b0\cf1 i\cf2\b ]\b0\cf1  \cf2\b =\b0\cf1  ar\cf2\b [\b0\cf1 i \cf2\b +\b0\cf1  \cf3 1\cf2\b ];
\par \b0\cf1             ar\cf2\b [\b0\cf1 i \cf2\b +\b0\cf1  \cf3 1\cf2\b ]\b0\cf1  \cf2\b =\b0\cf1  temp\cf2\b ;
\par \b0\cf1             \cf5\i //printf("Iteration no %d -> ", i + 1);
\par \i0\cf1             \cf5\i //displayArray(ar, numOfElements);
\par \i0\cf1         \cf2\b \}
\par \b0\cf1     \cf2\b \}
\par \}
\par 
\par }